name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-python:
    name: Python Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy lambda_orchestrator.py --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json
        bandit -r . -x tests/
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Import sort check with isort
      run: |
        isort --check-only --diff .
    
    - name: Run tests with pytest
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_TEST }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          htmlcov/
          bandit-report.json

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: us-east-1
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Build SAM application
      run: |
        sam build --use-container
    
    - name: Deploy to staging
      run: |
        sam deploy \
          --stack-name gpt5-happy-hour-staging \
          --s3-bucket ${{ secrets.SAM_BUCKET_STAGING }} \
          --capabilities CAPABILITY_IAM \
          --region us-east-1 \
          --parameter-overrides \
            Environment=staging \
            SupabaseUrl=${{ secrets.SUPABASE_URL_STAGING }} \
            SupabaseServiceKey=${{ secrets.SUPABASE_SERVICE_KEY_STAGING }} \
            OpenAIApiKey=${{ secrets.OPENAI_API_KEY_STAGING }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Build SAM application
      run: |
        sam build --use-container
    
    - name: Deploy to production
      run: |
        sam deploy \
          --stack-name gpt5-happy-hour-production \
          --s3-bucket ${{ secrets.SAM_BUCKET_PROD }} \
          --capabilities CAPABILITY_IAM \
          --region us-east-1 \
          --parameter-overrides \
            Environment=production \
            SupabaseUrl=${{ secrets.SUPABASE_URL_PROD }} \
            SupabaseServiceKey=${{ secrets.SUPABASE_SERVICE_KEY_PROD }} \
            OpenAIApiKey=${{ secrets.OPENAI_API_KEY_PROD }} \
            AllowedOrigins=${{ secrets.ALLOWED_ORIGINS_PROD }}
    
    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."
        curl -f https://api.yourdomain.com/health || exit 1

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'GPT-5 Happy Hour Discovery deployed successfully! ðŸŽ‰'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'GPT-5 Happy Hour Discovery deployment failed! ðŸš¨'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}